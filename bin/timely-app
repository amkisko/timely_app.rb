#!/usr/bin/env ruby

require "yaml"
require "optparse"
require "timely-app"

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: timely-app [command] [options]"

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end

  opts.on("-a", "--account ACCOUNT", "Account name") do |a|
    options[:account] = a
  end

  opts.on("-s", "--save", "Save changes to file") do |s|
    options[:save] = s
  end
end.parse!

cli = TimelyApp::CLI.new(options)

cmd = ARGV.shift
case cmd
when "auth"
  client_id = ARGV.shift || ENV.fetch("TIMELY_CLIENT_ID")
  client_secret = ARGV.shift || ENV.fetch("TIMELY_CLIENT_SECRET")
  ARGV.clear
  if client_id && client_secret
    cli.auth(client_id, client_secret)
  else
    puts "Usage: timely-app auth CLIENT_ID CLIENT_SECRET"
    exit 1
  end
when "config"
  if ARGV.length == 1
    puts cli.get_config(ARGV.shift)
  elsif ARGV.length == 2
    cli.set_config(ARGV.shift, ARGV.shift)
  else
    puts "Usage: timely-app config [key] [value]"
    exit 1
  end
else
  if cli.command_exists?(cmd)
    args = ARGV.each_with_object({}) { |arg, h|
      k, v = arg.split("=")
      h[k] = v
    }
    ARGV.clear
    response = cli.call(cmd, *args)
    case response
    when Array
      response.each do |r|
        puts r.to_h
      end
    when TimelyApp::Record
      puts response.to_h
    else
      puts response
    end
  else
    puts "Unknown command: #{cmd}"
    exit 1
  end
end
